/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.edusys.ui;

import com.edusys.Interface.BaseDAOInterface;
import com.edusys.Language.LanguageSelected;
import com.edusys.Language.QLCDLanguage;
import com.edusys.dao.ChuyenDeDAO;
import com.edusys.entity.ChuyenDe;
import com.edusys.utils.ImageHelper;
import com.edusys.utils.MessegerHelper;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author XUÂN THÀNH
 */
public class QLChuyenDeJPanel extends javax.swing.JPanel {

    private QLCDLanguage lg;
    private DefaultTableModel dtm;
    private BaseDAOInterface dao;
    private int index;
    private JFileChooser fileChooser;

    public QLChuyenDeJPanel() {
        initComponents();

        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlCardQLChuyenDe = new javax.swing.JPanel();
        lblQLChuyenDeTitle = new javax.swing.JLabel();
        pnlQLChuyenDe = new javax.swing.JPanel();
        pnlQLCDInput = new javax.swing.JPanel();
        pnlHinh = new javax.swing.JPanel();
        lblHinh = new javax.swing.JLabel();
        pnlInput = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        txtMaCD = new javax.swing.JTextField();
        lblMaCD = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        txtTenCD = new javax.swing.JTextField();
        lblTenCD = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblThoiLuong = new javax.swing.JLabel();
        txtThoiLuong = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        txtHocPhi = new javax.swing.JTextField();
        lblHocPhi = new javax.swing.JLabel();
        pnlButton = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        btnThem = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnMoi = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        txtTimKiem = new javax.swing.JTextField();
        btnTimKiem = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        btnFirst = new javax.swing.JButton();
        btnPre = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        btnLast = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblQLCD = new javax.swing.JTable();
        pnlMoTa = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtMoTa = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(34, 40, 44));

        pnlCardQLChuyenDe.setBackground(new java.awt.Color(34, 40, 44));
        pnlCardQLChuyenDe.setLayout(new java.awt.BorderLayout());

        lblQLChuyenDeTitle.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        lblQLChuyenDeTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblQLChuyenDeTitle.setText("QUẢN LÝ CHUYÊN ĐỀ");
        lblQLChuyenDeTitle.setPreferredSize(new java.awt.Dimension(382, 50));
        lblQLChuyenDeTitle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pnlCardQLChuyenDe.add(lblQLChuyenDeTitle, java.awt.BorderLayout.PAGE_START);

        pnlQLChuyenDe.setBackground(new java.awt.Color(34, 40, 44));

        pnlQLCDInput.setBackground(new java.awt.Color(34, 40, 44));
        pnlQLCDInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 102)));
        pnlQLCDInput.setLayout(new java.awt.BorderLayout());

        pnlHinh.setBackground(new java.awt.Color(34, 40, 44));
        pnlHinh.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 102)), "Hình logo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("MS UI Gothic", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        pnlHinh.setPreferredSize(new java.awt.Dimension(200, 200));
        pnlHinh.setLayout(new java.awt.BorderLayout());

        lblHinh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblHinhMouseClicked(evt);
            }
        });
        pnlHinh.add(lblHinh, java.awt.BorderLayout.CENTER);

        pnlQLCDInput.add(pnlHinh, java.awt.BorderLayout.WEST);

        pnlInput.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 204, 102)));
        pnlInput.setLayout(new java.awt.GridLayout(2, 2));

        jPanel9.setBackground(new java.awt.Color(34, 40, 44));
        jPanel9.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 255, 255)));

        lblMaCD.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblMaCD.setForeground(new java.awt.Color(255, 255, 255));
        lblMaCD.setText("Mã chuyên đề");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtMaCD)
                    .addComponent(lblMaCD, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblMaCD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMaCD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput.add(jPanel9);

        jPanel8.setBackground(new java.awt.Color(34, 40, 44));

        lblTenCD.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblTenCD.setForeground(new java.awt.Color(255, 255, 255));
        lblTenCD.setText("Tên chuyên đề");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTenCD)
                    .addComponent(lblTenCD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTenCD)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTenCD, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput.add(jPanel8);

        jPanel3.setBackground(new java.awt.Color(34, 40, 44));
        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 1, new java.awt.Color(255, 255, 255)));

        lblThoiLuong.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblThoiLuong.setForeground(new java.awt.Color(255, 255, 255));
        lblThoiLuong.setText("Thời lượng (giờ)");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblThoiLuong, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtThoiLuong))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblThoiLuong)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtThoiLuong, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput.add(jPanel3);

        jPanel4.setBackground(new java.awt.Color(34, 40, 44));

        lblHocPhi.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        lblHocPhi.setForeground(new java.awt.Color(255, 255, 255));
        lblHocPhi.setText("Học phí");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtHocPhi)
                    .addComponent(lblHocPhi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHocPhi)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHocPhi, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlInput.add(jPanel4);

        pnlQLCDInput.add(pnlInput, java.awt.BorderLayout.CENTER);

        pnlButton.setLayout(new java.awt.GridLayout(0, 3));

        jPanel12.setBackground(new java.awt.Color(34, 40, 44));

        btnThem.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.setPreferredSize(new java.awt.Dimension(70, 41));
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });
        jPanel12.add(btnThem);

        btnSua.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.setPreferredSize(new java.awt.Dimension(70, 41));
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });
        jPanel12.add(btnSua);

        btnXoa.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.setPreferredSize(new java.awt.Dimension(70, 41));
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });
        jPanel12.add(btnXoa);

        btnMoi.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        btnMoi.setText("Mới");
        btnMoi.setPreferredSize(new java.awt.Dimension(70, 41));
        btnMoi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoiActionPerformed(evt);
            }
        });
        jPanel12.add(btnMoi);

        pnlButton.add(jPanel12);

        jPanel10.setBackground(new java.awt.Color(34, 40, 44));

        txtTimKiem.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        txtTimKiem.setForeground(new java.awt.Color(255, 0, 0));
        txtTimKiem.setText("Nhập mã chuyên đề cần tìm");
        txtTimKiem.setPreferredSize(new java.awt.Dimension(200, 41));
        txtTimKiem.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTimKiemFocusLost(evt);
            }
        });
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyPressed(evt);
            }
        });
        jPanel10.add(txtTimKiem);

        btnTimKiem.setBackground(new java.awt.Color(255, 255, 255));
        btnTimKiem.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnTimKiem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/edusys/icons/zoom32.png"))); // NOI18N
        btnTimKiem.setPreferredSize(new java.awt.Dimension(70, 41));
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });
        jPanel10.add(btnTimKiem);

        pnlButton.add(jPanel10);

        jPanel11.setBackground(new java.awt.Color(34, 40, 44));

        btnFirst.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/edusys/icons/rnd_br_first.png"))); // NOI18N
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });
        jPanel11.add(btnFirst);

        btnPre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/edusys/icons/rnd_br_prev.png"))); // NOI18N
        btnPre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreActionPerformed(evt);
            }
        });
        jPanel11.add(btnPre);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/edusys/icons/rnd_br_next.png"))); // NOI18N
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        jPanel11.add(btnNext);

        btnLast.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/edusys/icons/rnd_br_last.png"))); // NOI18N
        btnLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastActionPerformed(evt);
            }
        });
        jPanel11.add(btnLast);

        pnlButton.add(jPanel11);

        tblQLCD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MÃ CD ", "TÊN CD ", "HỌC PHÍ", "THỜI LƯỢNG", "HÌNH", "MOTA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblQLCD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblQLCDMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblQLCD);
        if (tblQLCD.getColumnModel().getColumnCount() > 0) {
            tblQLCD.getColumnModel().getColumn(5).setMinWidth(0);
            tblQLCD.getColumnModel().getColumn(5).setPreferredWidth(0);
            tblQLCD.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        pnlMoTa.setBackground(new java.awt.Color(34, 40, 44));
        pnlMoTa.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Mô tả chuyên đề", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Arial", 1, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        txtMoTa.setColumns(20);
        txtMoTa.setRows(5);
        jScrollPane2.setViewportView(txtMoTa);

        javax.swing.GroupLayout pnlMoTaLayout = new javax.swing.GroupLayout(pnlMoTa);
        pnlMoTa.setLayout(pnlMoTaLayout);
        pnlMoTaLayout.setHorizontalGroup(
            pnlMoTaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        pnlMoTaLayout.setVerticalGroup(
            pnlMoTaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMoTaLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pnlQLChuyenDeLayout = new javax.swing.GroupLayout(pnlQLChuyenDe);
        pnlQLChuyenDe.setLayout(pnlQLChuyenDeLayout);
        pnlQLChuyenDeLayout.setHorizontalGroup(
            pnlQLChuyenDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQLChuyenDeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlButton, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlQLChuyenDeLayout.createSequentialGroup()
                .addGroup(pnlQLChuyenDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlMoTa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(pnlQLChuyenDeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addComponent(pnlQLCDInput, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 902, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlQLChuyenDeLayout.setVerticalGroup(
            pnlQLChuyenDeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlQLChuyenDeLayout.createSequentialGroup()
                .addComponent(pnlQLCDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlMoTa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(pnlButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlCardQLChuyenDe.add(pnlQLChuyenDe, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 912, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pnlCardQLChuyenDe, javax.swing.GroupLayout.DEFAULT_SIZE, 912, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 610, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(pnlCardQLChuyenDe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tblQLCDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblQLCDMouseClicked
        if (mouseClicked())
            return;
    }//GEN-LAST:event_tblQLCDMouseClicked

    private void txtTimKiemFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimKiemFocusGained
        if (txtTimKiem.getText().equals("Nhập mã chuyên đề cần tìm")) {
            txtTimKiem.setText("");
            txtTimKiem.setForeground(Color.BLACK);
        }
    }//GEN-LAST:event_txtTimKiemFocusGained

    private void txtTimKiemFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTimKiemFocusLost
        timKiemFocus();
    }//GEN-LAST:event_txtTimKiemFocusLost

    private void txtTimKiemKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyPressed
        EnterAcctions(evt);
    }//GEN-LAST:event_txtTimKiemKeyPressed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed
        if (txtTimKiem.getText().equals("Nhập mã chuyên đề cần tìm") || txtTimKiem.getText().trim().isEmpty()) {
            timKiemFocus();
            return;
        }
        String macd = txtTimKiem.getText();
        if (!checkTrung(macd)) {
            MessegerHelper.errorMesseger(new StringBuilder("Mã chuyên đề này không tồn tại!"), this);
            return;
        }
        for (int i = 0; i < tblQLCD.getRowCount(); i++) {
            if (macd.equals(tblQLCD.getValueAt(i, 0))) {
                index = i;
                showForm(index);
                updateStatus();
            }
        }
    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void lblHinhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblHinhMouseClicked
        chonAnh();
    }//GEN-LAST:event_lblHinhMouseClicked

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        first();
    }//GEN-LAST:event_btnFirstActionPerformed

    private void btnPreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreActionPerformed
        prev();
    }//GEN-LAST:event_btnPreActionPerformed

    private void btnLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastActionPerformed
        last();
    }//GEN-LAST:event_btnLastActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed
        if (themChuyenDe())
            return;
    }//GEN-LAST:event_btnThemActionPerformed

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        if (xoaChuyenDe())
            return;
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnMoiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoiActionPerformed
        clearForm();
    }//GEN-LAST:event_btnMoiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        if (suaChuyenDe())
            return;
    }//GEN-LAST:event_btnSuaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLast;
    private javax.swing.JButton btnMoi;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPre;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnXoa;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblHinh;
    private javax.swing.JLabel lblHocPhi;
    private javax.swing.JLabel lblMaCD;
    private javax.swing.JLabel lblQLChuyenDeTitle;
    private javax.swing.JLabel lblTenCD;
    private javax.swing.JLabel lblThoiLuong;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlCardQLChuyenDe;
    private javax.swing.JPanel pnlHinh;
    private javax.swing.JPanel pnlInput;
    private javax.swing.JPanel pnlMoTa;
    private javax.swing.JPanel pnlQLCDInput;
    private javax.swing.JPanel pnlQLChuyenDe;
    private javax.swing.JTable tblQLCD;
    private javax.swing.JTextField txtHocPhi;
    private javax.swing.JTextField txtMaCD;
    private javax.swing.JTextArea txtMoTa;
    private javax.swing.JTextField txtTenCD;
    private javax.swing.JTextField txtThoiLuong;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables

    private void init() {
        //khai báo Quản lý chuyên đề language
        this.lg = new QLCDLanguage(btnMoi, btnSua, btnThem, btnTimKiem, btnXoa, lblHocPhi, lblMaCD, lblQLChuyenDeTitle, lblTenCD, lblThoiLuong, pnlHinh, pnlMoTa, tblQLCD);
        
        //Khai báo lớp dao
        this.dao = new ChuyenDeDAO();

        //khai báo dtm
        this.dtm = (DefaultTableModel) tblQLCD.getModel();

        //Load dữ liệu lên bảng
        LoadDataToTable();

        //khai báo filechooser
        this.fileChooser = new JFileChooser();
    }
    
    public void QLCDchangeLanguge() {
        this.lg.changeLanguage(LanguageSelected.getSelected);
    }

    private void LoadDataToTable() {
        //load dữ liệu từ cơ sở dữ liệu vào bảng
        this.dtm.setRowCount(0);
        ArrayList<ChuyenDe> list = new ArrayList<>();
        try {
            list = this.dao.selectALL();
            for (ChuyenDe cd : list) {
                setDataRow(cd);
            }
            this.index = 0;
            updateStatus();
            showForm(index);
        } catch (Exception ex) {
            ex.printStackTrace();
            MessegerHelper.errorMesseger(new StringBuilder(ex.getMessage()), this);
        }
    }

    private void setDataRow(ChuyenDe cd) {
        //thêm một row vào bảng
        this.dtm.addRow(new Object[]{
            cd.getMaCD().trim(),
            cd.getTenCD(),
            cd.getHocPhi(),
            cd.getThoiLuong(),
            cd.getHinh(),
            cd.getMoTa()
        });
    }

    private void updateStatus() {
        //cập nhập trạng thái cho các button điều hướng
        boolean first = (this.index <= 0);
        boolean last = (this.index == tblQLCD.getRowCount() - 1);
        this.btnFirst.setEnabled(!first);
        this.btnPre.setEnabled(!first);
        this.btnLast.setEnabled(!last);
        this.btnNext.setEnabled(!last);
        if (index == -1) {
            this.tblQLCD.setRowSelectionAllowed(false);
        } else {
            this.tblQLCD.setRowSelectionAllowed(true);
        }
    }

    private void showForm(int i) {
        //hiển thị dữ liệu lên form tương ứng
        String tooltip = tblQLCD.getValueAt(i, 4) + "";
        this.txtMaCD.setText(tblQLCD.getValueAt(i, 0) + "");
        this.txtTenCD.setText(tblQLCD.getValueAt(i, 1) + "");
        this.txtHocPhi.setText(tblQLCD.getValueAt(i, 2) + "");
        this.txtThoiLuong.setText(tblQLCD.getValueAt(i, 3) + "");
        if (tooltip != null) {
            this.lblHinh.setToolTipText(tooltip);
            this.lblHinh.setIcon(ImageHelper.read(tooltip));
        }
        this.txtMoTa.setText(tblQLCD.getValueAt(i, 5) + "");
        tblQLCD.setRowSelectionInterval(i, i);
    }

    private ChuyenDe getForm() {
        String maCD = txtMaCD.getText().trim();
        String tenCD = txtTenCD.getText();
        float hocPhi = Float.parseFloat(txtHocPhi.getText());
        int thoiLuong = Integer.parseInt(txtThoiLuong.getText());
        String hinh = lblHinh.getToolTipText();
        String moTa = txtMoTa.getText();
        return new ChuyenDe(maCD, tenCD, hocPhi, thoiLuong, hinh, moTa);
    }

    private void clearForm() {
        //xóa trắng form
        this.txtMaCD.setText("");
        this.txtTenCD.setText("");
        this.txtHocPhi.setText("");
        this.txtThoiLuong.setText("");
        this.txtMoTa.setText("");
        this.lblHinh.setIcon(null);
        this.lblHinh.setToolTipText(null);
        this.index = -1;
        updateStatus();
    }

    private boolean mouseClicked() {
        //xử lý sưk kiện click lên table
        this.index = tblQLCD.getSelectedRow();
        updateStatus();
        if (index == -1) {
            return true;
        }
        showForm(index);
        return false;
    }

    private void next() {
        index++;
        updateStatus();
        showForm(index);
    }

    private void last() {
        index = tblQLCD.getRowCount() - 1;
        updateStatus();
        showForm(index);
    }

    private void prev() {
        index--;
        updateStatus();
        showForm(index);
    }

    private void first() {
        index = 0;
        updateStatus();
        showForm(index);
    }

    private void EnterAcctions(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            btnTimKiem.doClick();
        }
    }

    private void timKiemFocus() {
        if (txtTimKiem.getText().trim().isEmpty()) {
            txtTimKiem.setForeground(new Color(255, 0, 0));
            txtTimKiem.setText("Nhập mã chuyên đề cần tìm");
        }
    }

    private boolean checkTrung(String macd) {
        //check Trùng
        for (int i = 0; i < tblQLCD.getRowCount(); i++) {
            if (macd.trim().equals(tblQLCD.getValueAt(i, 0))) {
                index = i;
                this.tblQLCD.setRowSelectionInterval(i, i);
                return true;
            }
        }
        return false;
    }

    private void chonAnh() {
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            ImageHelper.save(file); // lưu hình ảnh vào thư mục logos
            ImageIcon icon = ImageHelper.read(file.getName());//đọc hình từ thư mục logos
            lblHinh.setIcon(icon);
            lblHinh.setToolTipText(file.getName());//giữ tên hình trong tooltop
        }
    }

    private boolean checkForm() {
        //checkRong
        StringBuilder loi = new StringBuilder();
        //check mã chuyên đề
        if (txtMaCD.getText().trim().isEmpty()) {
            loi.append("Không được để trông mã chuyên đề\n");
        } else if (txtMaCD.getText().length() > 5) {
            loi.append("Mã chuyên đề không được quá 5 ký tự\n");
        }
        //check tên chuyên đề
        if (txtTenCD.getText().trim().isEmpty()) {
            loi.append("không được để trống tên chuyên đề\n");
        } else if (txtTenCD.getText().length() > 50) {
            loi.append("Tên chuyên đề không được quá 50 ký tự\n");
        }
        //check thời lượng
        if (txtThoiLuong.getText().trim().isEmpty()) {
            loi.append("Không được để trống thời lượng\n");
        } else {
            try {
                int tl = Integer.parseInt(txtThoiLuong.getText());
                if (tl <= 0 || tl > 120) {
                    loi.append("Thời lượng phải lớn hơn 0 và không quá 120 giờ!\n");
                }
            } catch (Exception e) {
                loi.append("Thời lượng phải đúng định dạng số!\n");
            }
        }
        //check học phí
        if (txtHocPhi.getText().trim().isEmpty()) {
            loi.append("Không được để trống học phí\n");
        } else {
            try {
                float hp = Float.parseFloat(txtHocPhi.getText());
                if (hp <= 1000) {
                    loi.append("học phí phải lớn hơn 1000\n");
                }
            } catch (Exception e) {
                loi.append("Học phí phải số thực\n");
            }
        }
        //check mô tả
        if (txtMoTa.getText().trim().isEmpty()) {
            loi.append("không được để trống phần mô tả\n");
        } else if (txtMoTa.getText().length() < 10 || txtMoTa.getText().length() > 300) {
            loi.append("Phần mô tả phải đủ ít nhất 10 ký tự và không quá 300 ký tự\n");
        }
        //check hình logo
        if (lblHinh.getToolTipText() == null) {
            loi.append("Bạn phải chọn logo cho chuyên đề\n");
        }
        if (loi.length() > 0) {
            MessegerHelper.errorMesseger(loi, this);
            return true;
        }
        return false;
    }

    private boolean themChuyenDe() {
        if (checkForm()) {
            return true;
        }
        //check trùng
        if (checkTrung(getForm().getMaCD())) {
            MessegerHelper.errorMesseger(new StringBuilder("Mã chuyên đề đã tồn tại!\n"), this);
            return true;
        }
        //thêm chuyên đề mới
        try {
            this.dao.insert(getForm());
            MessegerHelper.alert("Thêm thành công", this);
            setDataRow(getForm());
            this.index = tblQLCD.getRowCount() - 1;
            this.tblQLCD.setRowSelectionInterval(index, index);
            showForm(index);
        } catch (Exception ex) {
            MessegerHelper.errorMesseger(new StringBuilder("Lỗi truy vấn!"), this);
            ex.printStackTrace();
            return true;
        }
        return false;
    }

    private boolean suaChuyenDe() {
        if (checkForm()) {
            return true;
        }
        //check trùng
        if (!checkTrung(getForm().getMaCD())) {
            MessegerHelper.errorMesseger(new StringBuilder("Mã chuyên đề này không tồn tại!\n"), this);
            return true;
        }
        //sủa chuyên đề
        try {
            this.dao.update(getForm());
            MessegerHelper.alert("Sửa thành công", this);
            this.index = tblQLCD.getSelectedRow();
            this.tblQLCD.setValueAt(getForm().getTenCD(), index, 1);
            this.tblQLCD.setValueAt(getForm().getHocPhi(), index, 2);
            this.tblQLCD.setValueAt(getForm().getThoiLuong(), index, 3);
            this.tblQLCD.setValueAt(getForm().getHinh(), index, 4);
            this.tblQLCD.setValueAt(getForm().getMoTa(), index, 5);
            this.tblQLCD.setRowSelectionInterval(index, index);
        } catch (Exception ex) {
            MessegerHelper.errorMesseger(new StringBuilder("Lỗi truy vấn!"), this);
            ex.printStackTrace();
            return true;
        }
        return false;
    }

    private boolean xoaChuyenDe() {
        String macd = txtMaCD.getText();
        macd = nhapMaCD(macd);
        if (MessegerHelper.confirm(this, "Bạn có muốn xóa chuyên đề " + macd + " này không?")) {
            try {
                this.dao.delete(macd);
                MessegerHelper.alert("Xóa thành công", this);
                for (int i = 0; i < tblQLCD.getRowCount(); i++) {
                    if (macd.equals(tblQLCD.getValueAt(i, 0))) {
                        this.index = i;
                    }
                }
                this.dtm.removeRow(index);
                showForm(index > tblQLCD.getRowCount() - 1 ? tblQLCD.getRowCount() - 1 : index);
            } catch (Exception ex) {
                MessegerHelper.errorMesseger(new StringBuilder("Không thể xóa chuyên đề đang được sử dụng cho khóa học!"), this);
//                ex.printStackTrace();
                return true;
            }
        }
        return false;
    }

    private String nhapMaCD(String macd) {
        //Bắt phải nhập không nhập thì bấm cancel mới thoát được nhá
        if (macd.isEmpty()) {
            macd = String.valueOf(MessegerHelper.prompt(this, "Bạn phải nhập vào mã chuyên đề muốn xóa"));
            if (macd.isEmpty()) {
                macd = nhapMaCD(macd);
            }
        }
        if (!checkTrung(macd)) {
            macd = String.valueOf(MessegerHelper.prompt(this, "Mã chuyên đề " + macd + " này không tồn tại\n"
                    + "Xin hãy kiểm tra lại"));
            if (!checkTrung(macd)) {
                macd = nhapMaCD(macd);
            }
        }
        return macd;
    }
}
